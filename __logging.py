import os
import re
import logging
from logging import FileHandler, StreamHandler
from flask import Flask, request, Response
from rich import print

class RemoveAnsiAndRichMarkupFormatter(logging.Formatter):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π Formatter, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    —É–±–∏—Ä–∞–µ—Ç –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ANSI-–∫–æ–¥—ã ([33m ...) –∏ Rich-—Ç–µ–≥–∏ ([yellow], [/yellow], ...).
    """
    ANSI_PATTERN = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
    RICH_TAGS_PATTERN = re.compile(r'\[/?[^\]]+\]')

    def format(self, record):
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (—É–∂–µ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π %s, %d, etc.)
        s = super().format(record)
        # –£–¥–∞–ª–∏—Ç—å ANSI escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        s = self.ANSI_PATTERN.sub('', s)
        # –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏ –≤–∏–¥–∞ [yellow] –∏–ª–∏ [/yellow]
        s = self.RICH_TAGS_PATTERN.sub('', s)
        return s

class Logger:
    def __init__(self, app):
        # –ó–¥–µ—Å—å app ‚Äî —ç—Ç–æ –≤–∞—à –∫–ª–∞—Å—Å App, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø–æ–ª–µ flask: Flask
        self.app = app.flask
        self.app.logger.propagate = False
        self.app.logger.handlers.clear()

        # –°–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(app.project_root + "logs"):
            os.mkdir(app.project_root + "logs")
            

        # --- –•–µ–Ω–¥–ª–µ—Ä, –ø–∏—à—É—â–∏–π –≤ —Ñ–∞–π–ª ---
        file_handler = FileHandler(app.project_root + "logs/app.log")
        file_handler.setLevel(logging.INFO)

        # --- –•–µ–Ω–¥–ª–µ—Ä, –ø–∏—à—É—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å ---
        console_handler = StreamHandler()
        console_handler.setLevel(logging.INFO)

        # –®–∞–±–ª–æ–Ω –ª–æ–≥–∞
        log_format = '%(asctime)s - %(levelname)s - %(message)s'
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ ‚Äî —Å ¬´–æ—á–∏—Å—Ç–∫–æ–π¬ª ANSI –∏ Rich
        file_formatter = RemoveAnsiAndRichMarkupFormatter(log_format)
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ ‚Äî –æ–±—ã—á–Ω—ã–π, (–∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç–æ—Ç –∂–µ, –Ω–æ —Ç–æ–≥–¥–∞ –∏—Å—á–µ–∑–Ω—É—Ç —Ü–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏)
        console_formatter = logging.Formatter(log_format)

        file_handler.setFormatter(file_formatter)
        console_handler.setFormatter(console_formatter)

        # –õ–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
        self.app.logger.setLevel(logging.INFO)
        self.app.logger.addHandler(file_handler)
        self.app.logger.addHandler(console_handler)

        # –õ–æ–≥–≥–µ—Ä Werkzeug (–¥–ª—è GET /‚Ä¶ 200)
        # –£–¥–∞–ª–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ werkzeug:
        werkzeug_logger = logging.getLogger('werkzeug')
        werkzeug_logger.setLevel(logging.WARNING)  # –≤–º–µ—Å—Ç–æ INFO, —á—Ç–æ–±—ã –æ–Ω –º–æ–ª—á–∞–ª

        # –ß—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏, –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä,
        # –Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ —Ç–∞–º, –∏ —Ç–∞–º ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ
        werkzeug_logger.addHandler(file_handler)
        werkzeug_logger.addHandler(console_handler)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º before_request, —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å IP –∏ –º–µ—Ç–æ–¥
        self.register_hooks()

    def register_hooks(self):
        @self.app.after_request
        def log_ip(response: Response):
            ip = request.remote_addr or 'Unknown IP'
            method = request.method
            user_agent = request.headers.get('User-Agent', 'Unknown User-Agent')
            path = request.path
            self.app.logger.info(f"{ip} {method} {path} - {user_agent} - {response.status_code}")
            return response

